import os
from lexical import LexicalAnalyzer
from syntax import Parser, SyntaxError


def main():
    test_cases_folder = "Test-Cases"

    # Ensure the folder exists
    if not os.path.exists(test_cases_folder):
        print(f"The folder '{test_cases_folder}' does not exist.")
        return

    # List available test case files
    files = [f for f in os.listdir(test_cases_folder) if f.endswith(".txt")]
    if not files:
        print(f"No source code files found in the '{test_cases_folder}' folder.")
        return

    print("Available programs to compile:")
    for idx, file in enumerate(files):
        print(f"{idx + 1}. {file}")

    # Ask user to select a program
    while True:
        try:
            choice = int(
                input(
                    f"\nEnter the number of the program you'd like to compile (1-{len(files)}): "
                )
            )
            if 1 <= choice <= len(files):
                selected_file = files[choice - 1]
                break
            else:
                print(
                    f"Invalid choice. Please select a number between 1 and {len(files)}."
                )
        except ValueError:
            print("Invalid input. Please enter a number.")

    # Read the selected program
    file_path = os.path.join(test_cases_folder, selected_file)
    try:
        with open(file_path, "r") as file:
            source_code = file.read()
    except Exception as e:
        print(f"Error reading file '{selected_file}': {e}")
        return

    print(f"\nCompiling '{selected_file}'...\n")

    # Perform lexical analysis
    lexer = LexicalAnalyzer(source_code)
    tokens = lexer.tokenize()

    print("Tokens generated by the lexical analyzer:")
    for token in tokens:
        print(token)

    print("\n--- Syntax Analysis ---\n")

    # Perform syntax analysis
    parser = Parser(tokens)
    try:
        ast = parser.parse_program()
        parser.display_ast(ast)  # Display the tree-like structure of the AST
        parser.visualize_ast(ast)  # Visualize the AST using PrettyPrintTree
    except SyntaxError as e:
        print(f"Syntax Error: {e}")


if __name__ == "__main__":
    main()
